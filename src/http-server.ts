import express from 'express';
import cors from 'cors';
import { randomUUID } from 'node:crypto';
import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import {
  CallToolRequestSchema,
  ListToolsRequestSchema,
  Tool,
} from '@modelcontextprotocol/sdk/types.js';
import { VKApi } from './vk-api.js';
import dotenv from 'dotenv';

dotenv.config();

const app = express();
const PORT = process.env.PORT || 3000;

// CORS –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
app.use(cors({
  origin: '*',
  exposedHeaders: ['Mcp-Session-Id'],
  allowedHeaders: ['Content-Type', 'mcp-session-id'],
}));

app.use(express.json());

// –°–æ–∑–¥–∞–Ω–∏–µ MCP —Å–µ—Ä–≤–µ—Ä–∞
function createMCPServer() {
  const accessToken = process.env.VK_ACCESS_TOKEN;
  const apiVersion = process.env.VK_API_VERSION || '5.131';

  if (!accessToken) {
    throw new Error('VK_ACCESS_TOKEN environment variable is required');
  }

  const vkApi = new VKApi(accessToken, apiVersion);
  
  const server = new Server(
    {
      name: 'vkontakte-mcp-server',
      version: '1.0.0',
    },
    {
      capabilities: {
        tools: {},
      },
    }
  );

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
  server.setRequestHandler(ListToolsRequestSchema, async () => {
    return {
      tools: [
        {
          name: 'post_to_wall',
          description: '–ü—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç –Ω–∞ —Å—Ç–µ–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≥—Ä—É–ø–ø—ã –í–ö–æ–Ω—Ç–∞–∫—Ç–µ',
          inputSchema: {
            type: 'object',
            properties: {
              message: {
                type: 'string',
                description: '–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏',
              },
              group_id: {
                type: 'string',
                description: 'ID –≥—Ä—É–ø–ø—ã (–¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –≥—Ä—É–ø–ø–µ)',
              },
              user_id: {
                type: 'string',
                description: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ)',
              },
              attachments: {
                type: 'array',
                items: { type: 'string' },
                description: '–ú–∞—Å—Å–∏–≤ –≤–ª–æ–∂–µ–Ω–∏–π (—Å—Å—ã–ª–∫–∏ –Ω–∞ –º–µ–¥–∏–∞)',
              },
              publish_date: {
                type: 'number',
                description: '–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (Unix timestamp)',
              },
            },
            required: ['message'],
          },
        },
        {
          name: 'get_wall_posts',
          description: '–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å—Ç—ã —Å–æ —Å—Ç–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≥—Ä—É–ø–ø—ã',
          inputSchema: {
            type: 'object',
            properties: {
              group_id: {
                type: 'string',
                description: 'ID –≥—Ä—É–ø–ø—ã',
              },
              user_id: {
                type: 'string',
                description: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
              },
              count: {
                type: 'number',
                description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20)',
              },
              offset: {
                type: 'number',
                description: '–°–º–µ—â–µ–Ω–∏–µ –æ—Ç –Ω–∞—á–∞–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)',
              },
            },
          },
        },
        {
          name: 'search_posts',
          description: '–ò—â–µ—Ç –ø–æ—Å—Ç—ã –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É',
          inputSchema: {
            type: 'object',
            properties: {
              query: {
                type: 'string',
                description: '–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å',
              },
              group_id: {
                type: 'string',
                description: 'ID –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ–∏—Å–∫–∞',
              },
              count: {
                type: 'number',
                description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
              },
              offset: {
                type: 'number',
                description: '–°–º–µ—â–µ–Ω–∏–µ –æ—Ç –Ω–∞—á–∞–ª–∞',
              },
            },
            required: ['query'],
          },
        },
        {
          name: 'get_group_info',
          description: '–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ',
          inputSchema: {
            type: 'object',
            properties: {
              group_id: {
                type: 'string',
                description: 'ID –≥—Ä—É–ø–ø—ã',
              },
            },
            required: ['group_id'],
          },
        },
        {
          name: 'get_user_info',
          description: '–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ',
          inputSchema: {
            type: 'object',
            properties: {
              user_id: {
                type: 'string',
                description: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
              },
            },
            required: ['user_id'],
          },
        },
      ],
    };
  });

  server.setRequestHandler(CallToolRequestSchema, async (request) => {
    const { name, arguments: args } = request.params;

    try {
      switch (name) {
        case 'post_to_wall': {
          const ownerId = args.group_id ? `-${args.group_id}` : args.user_id;
          const result = await vkApi.postToWall({
            message: args.message,
            owner_id: ownerId,
            attachments: args.attachments,
            publish_date: args.publish_date,
          });
          return {
            content: [
              {
                type: 'text',
                text: `–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω! ID –ø–æ—Å—Ç–∞: ${result.post_id}`,
              },
            ],
          };
        }

        case 'get_wall_posts': {
          const ownerId = args.group_id ? `-${args.group_id}` : args.user_id;
          const result = await vkApi.getWallPosts({
            owner_id: ownerId,
            count: args.count || 20,
            offset: args.offset || 0,
          });
          return {
            content: [
              {
                type: 'text',
                text: `–ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: ${result.count}\n\n${result.items
                  .map(
                    (post) =>
                      `üìù ${post.text.substring(0, 100)}${
                        post.text.length > 100 ? '...' : ''
                      }\n‚ù§Ô∏è ${post.likes?.count || 0} | üîÑ ${post.reposts?.count || 0} | üí¨ ${
                        post.comments?.count || 0
                      }\n`
                  )
                  .join('\n')}`,
              },
            ],
          };
        }

        case 'search_posts': {
          const ownerId = args.group_id ? `-${args.group_id}` : undefined;
          const result = await vkApi.searchPosts({
            query: args.query,
            owner_id: ownerId,
            count: args.count || 20,
            offset: args.offset || 0,
          });
          return {
            content: [
              {
                type: 'text',
                text: `–ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${args.query}"\n–ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: ${result.count}\n\n${result.items
                  .map(
                    (post) =>
                      `üîç ${post.text.substring(0, 100)}${
                        post.text.length > 100 ? '...' : ''
                      }\n‚ù§Ô∏è ${post.likes?.count || 0} | üîÑ ${post.reposts?.count || 0} | üí¨ ${
                        post.comments?.count || 0
                      }\n`
                  )
                  .join('\n')}`,
              },
            ],
          };
        }

        case 'get_group_info': {
          const result = await vkApi.getGroupInfo(args.group_id);
          const group = result[0];
          return {
            content: [
              {
                type: 'text',
                text: `üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ: ${group.name}\nID: ${group.id}\n–¢–∏–ø: ${group.type}\n–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${group.members_count}`,
              },
            ],
          };
        }

        case 'get_user_info': {
          const result = await vkApi.getUserInfo(args.user_id);
          const user = result[0];
          return {
            content: [
              {
                type: 'text',
                text: `üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n–ò–º—è: ${user.first_name} ${user.last_name}\nID: ${user.id}\nUsername: ${user.screen_name}`,
              },
            ],
          };
        }

        default:
          throw new Error(`Unknown tool: ${name}`);
      }
    } catch (error) {
      return {
        content: [
          {
            type: 'text',
            text: `‚ùå –û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
          },
        ],
        isError: true,
      };
    }
  });

  return server;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ MCP –∑–∞–ø—Ä–æ—Å–æ–≤
app.all('/mcp', async (req, res) => {
  try {
    const server = createMCPServer();
    const transport = new StdioServerTransport();
    await server.connect(transport);

    // –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ JSON-RPC –∑–∞–ø—Ä–æ—Å–æ–≤
    if (req.method === 'POST' && req.body) {
      const { method, params, id } = req.body;
      
      if (method === 'callTool') {
        const result = await server.handleRequest({
          jsonrpc: '2.0',
          method: 'callTool',
          params: { name: params.name, arguments: params.arguments },
          id
        });
        
        res.json({
          jsonrpc: '2.0',
          result,
          id
        });
      } else {
        res.json({
          jsonrpc: '2.0',
          error: { code: -32601, message: 'Method not found' },
          id
        });
      }
    } else {
      res.json({
        jsonrpc: '2.0',
        error: { code: -32600, message: 'Invalid Request' },
        id: null
      });
    }
  } catch (error) {
    console.error('Error handling MCP request:', error);
    if (!res.headersSent) {
      res.status(500).json({
        jsonrpc: '2.0',
        error: {
          code: -32603,
          message: 'Internal server error',
        },
        id: null,
      });
    }
  }
});

// –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
app.get('/health', (req, res) => {
  res.json({
    status: 'ok',
    service: 'VKontakte MCP Server',
    version: '1.0.0',
    timestamp: new Date().toISOString(),
  });
});

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ MCP —Å–µ—Ä–≤–µ—Ä–µ
app.get('/mcp-info', (req, res) => {
  res.json({
    name: 'vkontakte-mcp-server',
    version: '1.0.0',
    description: 'MCP server for VKontakte (VK.com) integration',
    transports: ['HTTP'],
    capabilities: ['tools'],
    tools: [
      'post_to_wall',
      'get_wall_posts', 
      'search_posts',
      'get_group_info',
      'get_user_info'
    ]
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üöÄ VKontakte MCP Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üì° MCP endpoint: http://localhost:${PORT}/mcp`);
  console.log(`üè• Health check: http://localhost:${PORT}/health`);
  console.log(`‚ÑπÔ∏è  MCP info: http://localhost:${PORT}/mcp-info`);
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('–ü–æ–ª—É—á–µ–Ω SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('–ü–æ–ª—É—á–µ–Ω SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  process.exit(0);
});
