import express from 'express';
import cors from 'cors';
import { VKApi } from './vk-api.js';
import { randomUUID } from 'crypto';

const app = express();
const PORT = process.env.PORT || 3000;

// –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ Railway
console.log('üîß Environment variables:');
console.log('  PORT:', process.env.PORT);
console.log('  NODE_ENV:', process.env.NODE_ENV);
console.log('  Using PORT:', PORT);

// CORS –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ (Make, Cursor, n8n)
app.use(cors({
  origin: (_origin, callback) => callback(null, true),
  credentials: true,
  allowedHeaders: ['Content-Type', 'Authorization', 'x-vk-access-token', 'mcp-session-id'],
  exposedHeaders: ['mcp-session-id']
}));

app.use(express.json());

// –†–∞–∑—Ä–µ—à–∞–µ–º preflight –¥–ª—è –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.options('*', cors());

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π –¥–ª—è Streamable HTTP
const sessions: Map<string, any> = new Map();

// –î–æ—Å—Ç–∞—ë–º VK access token –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
function extractAccessToken(req: express.Request): string {
  const headerAuth = req.headers['authorization'];
  const headerToken = req.headers['x-vk-access-token'];
  const queryToken = typeof req.query['access_token'] === 'string' ? String(req.query['access_token']) : undefined;
  const body = (req.body ?? {}) as any;
  const bodyToken = body?.params?.auth?.access_token
    || body?.params?.arguments?.access_token
    || body?.access_token;

  // –ú–∞—Å–∫–∏—Ä—É–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–≥–∞—Ö
  const mask = (v: unknown) => (typeof v === 'string' && v.length > 8 ? v.slice(0, 4) + '...' + v.slice(-4) : v ? '<provided>' : '<absent>');
  console.log('Attempting to extract VK access token:');
  console.log('  Authorization header:', typeof headerAuth === 'string' ? mask(headerAuth) : '<absent>');
  console.log('  x-vk-access-token header:', mask(headerToken));
  console.log('  query access_token:', mask(queryToken));
  console.log('  body access_token:', mask(bodyToken));

  if (typeof headerAuth === 'string' && headerAuth.toLowerCase().startsWith('bearer ')) {
    console.log('Token found in Authorization header.');
    return headerAuth.slice(7).trim();
  }

  if (typeof headerToken === 'string') {
    console.log('Token found in x-vk-access-token header.');
    return headerToken.trim();
  }

  if (typeof queryToken === 'string' && queryToken.length > 0) {
    console.log('Token found in query access_token.');
    return queryToken.trim();
  }

  if (typeof bodyToken === 'string' && bodyToken.length > 0) {
    console.log('Token found in body params.');
    return bodyToken.trim();
  }

  throw new Error('VK access token is required via Authorization Bearer, x-vk-access-token header, query ?access_token=, or JSON body params');
}

// –°–æ–∑–¥–∞–Ω–∏–µ VK API –∫–ª–∏–µ–Ω—Ç–∞
function createVKApi(req: express.Request) {
  const accessToken = extractAccessToken(req);
  const apiVersion = '5.199';
  return new VKApi(accessToken, apiVersion);
}

// –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è REST (n8n)
function sendOk(res: express.Response, data: unknown) {
  res.json({ success: true, data });
}

function sendErr(res: express.Response, httpStatus: number, code: string | number, message: string) {
  res.status(httpStatus).json({ success: false, error: { code, message } });
}

// –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (50)
const ALL_TOOLS = [
    {
      name: 'post_to_wall',
    description: '–ü—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç –Ω–∞ —Å—Ç–µ–Ω—É',
      inputSchema: {
        type: 'object',
        properties: {
          message: { type: 'string', description: '–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞' },
          group_id: { type: 'string', description: 'ID –≥—Ä—É–ø–ø—ã' },
          user_id: { type: 'string', description: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
          post_as: { 
            type: 'string', 
            enum: ['group', 'user'],
            description: '–û—Ç —á—å–µ–≥–æ –∏–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å: group –∏–ª–∏ user',
            default: 'group'
          }
        },
        required: ['message'],
        additionalProperties: false,
      },
    },
    {
      name: 'get_wall_posts',
    description: '–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å—Ç—ã —Å–æ —Å—Ç–µ–Ω—ã',
      inputSchema: {
        type: 'object',
        properties: {
        group_id: { type: 'string', description: 'ID –≥—Ä—É–ø–ø—ã' },
        user_id: { type: 'string', description: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
        count: { type: 'number', description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤', default: 20 },
        offset: { type: 'number', description: '–°–º–µ—â–µ–Ω–∏–µ', default: 0 },
      },
        additionalProperties: false,
      },
    },
    {
      name: 'search_posts',
      description: '–ò—â–µ—Ç –ø–æ—Å—Ç—ã –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É',
      inputSchema: {
        type: 'object',
        properties: {
        query: { type: 'string', description: '–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å' },
        group_id: { type: 'string', description: 'ID –≥—Ä—É–ø–ø—ã' },
        count: { type: 'number', description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤', default: 20 },
        offset: { type: 'number', description: '–°–º–µ—â–µ–Ω–∏–µ', default: 0 },
        },
        required: ['query'],
        additionalProperties: false,
      },
    },
    {
      name: 'get_group_info',
    description: '–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ',
      inputSchema: {
        type: 'object',
        properties: {
        group_id: { type: 'string', description: 'ID –≥—Ä—É–ø–ø—ã' },
        },
        required: ['group_id'],
        additionalProperties: false,
      },
    },
    {
      name: 'get_user_info',
    description: '–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ',
      inputSchema: {
        type: 'object',
        properties: {
        user_id: { type: 'string', description: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
        },
        required: ['user_id'],
        additionalProperties: false,
      },
    },
  {
    name: 'get_post_stats',
    description: '–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å—Ç–∞',
      inputSchema: {
        type: 'object',
        properties: {
        post_id: { type: 'string', description: 'ID –ø–æ—Å—Ç–∞' },
          group_id: { type: 'string', description: 'ID –≥—Ä—É–ø–ø—ã' },
        },
      required: ['post_id'],
        additionalProperties: false,
      },
    },
    {
    name: 'get_wall_by_id',
    description: '–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å—Ç –ø–æ ID',
      inputSchema: {
        type: 'object',
        properties: {
        post_id: { type: 'string', description: 'ID –ø–æ—Å—Ç–∞' },
        group_id: { type: 'string', description: 'ID –≥—Ä—É–ø–ø—ã' },
      },
      required: ['post_id'],
        additionalProperties: false,
    },
  },
  {
    name: 'get_comments',
    description: '–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç—É',
    inputSchema: {
      type: 'object',
      properties: {
        post_id: { type: 'string', description: 'ID –ø–æ—Å—Ç–∞' },
        group_id: { type: 'string', description: 'ID –≥—Ä—É–ø–ø—ã' },
        count: { type: 'number', description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤', default: 20 },
        offset: { type: 'number', description: '–°–º–µ—â–µ–Ω–∏–µ', default: 0 },
      },
      required: ['post_id'],
        additionalProperties: false,
    },
  },
  {
    name: 'create_comment',
    description: '–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É',
    inputSchema: {
      type: 'object',
      properties: {
        post_id: { type: 'string', description: 'ID –ø–æ—Å—Ç–∞' },
        message: { type: 'string', description: '–¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è' },
        group_id: { type: 'string', description: 'ID –≥—Ä—É–ø–ø—ã' },
      },
      required: ['post_id', 'message'],
        additionalProperties: false,
      },
    },
    {
    name: 'delete_post',
    description: '–£–¥–∞–ª—è–µ—Ç –ø–æ—Å—Ç',
      inputSchema: {
        type: 'object',
        properties: {
        post_id: { type: 'string', description: 'ID –ø–æ—Å—Ç–∞' },
        group_id: { type: 'string', description: 'ID –≥—Ä—É–ø–ø—ã' },
      },
      required: ['post_id'],
        additionalProperties: false,
    },
  },
  {
    name: 'edit_post',
    description: '–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –ø–æ—Å—Ç',
    inputSchema: {
      type: 'object',
      properties: {
        post_id: { type: 'string', description: 'ID –ø–æ—Å—Ç–∞' },
        message: { type: 'string', description: '–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞' },
        group_id: { type: 'string', description: 'ID –≥—Ä—É–ø–ø—ã' },
      },
      required: ['post_id', 'message'],
        additionalProperties: false,
    },
  },
  {
    name: 'add_like',
    description: '–°—Ç–∞–≤–∏—Ç –ª–∞–π–∫ –ø–æ—Å—Ç—É',
    inputSchema: {
      type: 'object',
      properties: {
        post_id: { type: 'string', description: 'ID –ø–æ—Å—Ç–∞' },
        group_id: { type: 'string', description: 'ID –≥—Ä—É–ø–ø—ã' },
      },
      required: ['post_id'],
        additionalProperties: false,
      },
    },
    {
    name: 'delete_like',
    description: '–£–±–∏—Ä–∞–µ—Ç –ª–∞–π–∫ —Å –ø–æ—Å—Ç–∞',
      inputSchema: {
        type: 'object',
        properties: {
        post_id: { type: 'string', description: 'ID –ø–æ—Å—Ç–∞' },
        group_id: { type: 'string', description: 'ID –≥—Ä—É–ø–ø—ã' },
      },
      required: ['post_id'],
        additionalProperties: false,
    },
  },
  {
    name: 'get_group_members',
    description: '–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã',
    inputSchema: {
      type: 'object',
      properties: {
        group_id: { type: 'string', description: 'ID –≥—Ä—É–ø–ø—ã' },
        count: { type: 'number', description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', default: 100 },
        offset: { type: 'number', description: '–°–º–µ—â–µ–Ω–∏–µ', default: 0 },
        },
        required: ['group_id'],
        additionalProperties: false,
      },
    },
    {
    name: 'resolve_screen_name',
    description: '–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É –∏–º–µ–Ω–∏',
      inputSchema: {
        type: 'object',
        properties: {
        screen_name: { type: 'string', description: '–ö–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è' },
      },
      required: ['screen_name'],
        additionalProperties: false,
    },
  },
  {
    name: 'upload_wall_photo_from_url',
    description: '–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–æ—Ç–æ –Ω–∞ —Å—Ç–µ–Ω—É –ø–æ URL',
    inputSchema: {
      type: 'object',
      properties: {
        photo_url: { type: 'string', description: 'URL —Ñ–æ—Ç–æ' },
        group_id: { type: 'string', description: 'ID –≥—Ä—É–ø–ø—ã' },
      },
      required: ['photo_url'],
        additionalProperties: false,
    },
  },
  {
    name: 'upload_video_from_url',
    description: '–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–∏–¥–µ–æ –ø–æ URL',
    inputSchema: {
      type: 'object',
      properties: {
        video_url: { type: 'string', description: 'URL –≤–∏–¥–µ–æ' },
        name: { type: 'string', description: '–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ' },
        description: { type: 'string', description: '–û–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ' },
        group_id: { type: 'string', description: 'ID –≥—Ä—É–ø–ø—ã' },
      },
      required: ['video_url', 'name'],
        additionalProperties: false,
      },
    },
    // Stories API
    {
      name: 'get_stories_photo_upload_server',
      description: '–®–ê–ì 1: –ü–æ–ª—É—á–∞–µ—Ç URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –≤ –∏—Å—Ç–æ—Ä–∏—é. –°–õ–ï–î–£–Æ–©–ò–ô –®–ê–ì: upload_media_to_stories',
      inputSchema: {
        type: 'object',
        properties: {
          group_id: { type: 'string', description: 'ID –≥—Ä—É–ø–ø—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏' },
        },
        required: ['group_id'],
        additionalProperties: false,
      },
    },
    {
      name: 'get_stories_video_upload_server',
      description: '–®–ê–ì 1: –ü–æ–ª—É—á–∞–µ—Ç URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –≤ –∏—Å—Ç–æ—Ä–∏—é. –°–õ–ï–î–£–Æ–©–ò–ô –®–ê–ì: upload_media_to_stories',
      inputSchema: {
        type: 'object',
        properties: {
          group_id: { type: 'string', description: 'ID –≥—Ä—É–ø–ø—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏' },
        },
        required: ['group_id'],
        additionalProperties: false,
      },
    },
    {
      name: 'upload_media_to_stories',
      description: '–®–ê–ì 2: –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–æ—Ç–æ –ò–õ–ò –≤–∏–¥–µ–æ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π URL. –°–õ–ï–î–£–Æ–©–ò–ô –®–ê–ì: save_story',
      inputSchema: {
        type: 'object',
        properties: {
          upload_url: { type: 'string', description: 'URL –∏–∑ get_stories_photo_upload_server –∏–ª–∏ get_stories_video_upload_server' },
          media_url: { type: 'string', description: 'URL —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏' },
          group_id: { type: 'string', description: 'ID –≥—Ä—É–ø–ø—ã' },
        },
        required: ['upload_url', 'media_url', 'group_id'],
        additionalProperties: false,
      },
    },
    {
      name: 'save_story',
      description: '–®–ê–ì 3: –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –º–µ–¥–∏–∞ –∫–∞–∫ –∏—Å—Ç–æ—Ä–∏—é. –í–ê–ñ–ù–û: –≤—ã–∑—ã–≤–∞–π –ü–û–°–õ–ï upload_media_to_stories',
      inputSchema: {
        type: 'object',
        properties: {
          upload_results: { type: 'string', description: '–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ upload_media_to_stories' },
          group_id: { type: 'string', description: 'ID –≥—Ä—É–ø–ø—ã' },
          reply_to_story: { type: 'string', description: 'ID –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)' },
          link_text: { type: 'string', description: '–¢–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)' },
          link_url: { type: 'string', description: 'URL —Å—Å—ã–ª–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)' },
        },
        required: ['upload_results', 'group_id'],
        additionalProperties: false,
      },
    },
    {
      name: 'get_stories',
      description: '–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≥—Ä—É–ø–ø—ã',
      inputSchema: {
        type: 'object',
        properties: {
          owner_id: { type: 'string', description: 'ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ (–≥—Ä—É–ø–ø–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)' },
          extended: { type: 'boolean', description: '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', default: false },
          fields: { type: 'array', items: { type: 'string' }, description: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' },
        },
        additionalProperties: false,
      },
    },
    {
      name: 'delete_story',
      description: '–£–¥–∞–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é',
      inputSchema: {
        type: 'object',
        properties: {
          story_id: { type: 'number', description: 'ID –∏—Å—Ç–æ—Ä–∏–∏' },
          owner_id: { type: 'string', description: 'ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏' },
        },
        required: ['story_id'],
        additionalProperties: false,
      },
    },
    // Pin/Unpin Posts
    {
      name: 'pin_post',
      description: '–ó–∞–∫—Ä–µ–ø–ª—è–µ—Ç –ø–æ—Å—Ç –Ω–∞ —Å—Ç–µ–Ω–µ –≥—Ä—É–ø–ø—ã',
      inputSchema: {
        type: 'object',
        properties: {
          post_id: { type: 'number', description: 'ID –ø–æ—Å—Ç–∞' },
          group_id: { type: 'string', description: 'ID –≥—Ä—É–ø–ø—ã' },
        },
        required: ['post_id', 'group_id'],
        additionalProperties: false,
      },
    },
    {
      name: 'unpin_post',
      description: '–û—Ç–∫—Ä–µ–ø–ª—è–µ—Ç –ø–æ—Å—Ç —Å–æ —Å—Ç–µ–Ω—ã –≥—Ä—É–ø–ø—ã',
      inputSchema: {
        type: 'object',
        properties: {
          post_id: { type: 'number', description: 'ID –ø–æ—Å—Ç–∞' },
          group_id: { type: 'string', description: 'ID –≥—Ä—É–ø–ø—ã' },
        },
        required: ['post_id', 'group_id'],
        additionalProperties: false,
      },
    },
    // Reposts
    {
      name: 'repost',
      description: '–†–µ–ø–æ—Å—Ç–∏—Ç –∑–∞–ø–∏—Å—å –Ω–∞ —Å—Ç–µ–Ω—É –≥—Ä—É–ø–ø—ã',
      inputSchema: {
        type: 'object',
        properties: {
          object: { type: 'string', description: '–û–±—ä–µ–∫—Ç –¥–ª—è —Ä–µ–ø–æ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: wall123_456)' },
          message: { type: 'string', description: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ —Ä–µ–ø–æ—Å—Ç—É' },
          group_id: { type: 'string', description: 'ID –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä–µ–ø–æ—Å—Ç–∞' },
        },
        required: ['object', 'group_id'],
        additionalProperties: false,
      },
    },
    {
      name: 'get_reposts',
      description: '–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–ø–æ—Å—Ç—ã –ø–æ—Å—Ç–∞',
      inputSchema: {
        type: 'object',
        properties: {
          post_id: { type: 'number', description: 'ID –ø–æ—Å—Ç–∞' },
          group_id: { type: 'string', description: 'ID –≥—Ä—É–ø–ø—ã' },
          count: { type: 'number', description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–ø–æ—Å—Ç–æ–≤', default: 20 },
          offset: { type: 'number', description: '–°–º–µ—â–µ–Ω–∏–µ', default: 0 },
        },
        required: ['post_id', 'group_id'],
        additionalProperties: false,
      },
    },
    // Photo Albums
    {
      name: 'create_photo_album',
      description: '–°–æ–∑–¥–∞–µ—Ç –∞–ª—å–±–æ–º –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π',
      inputSchema: {
        type: 'object',
        properties: {
          title: { type: 'string', description: '–ù–∞–∑–≤–∞–Ω–∏–µ –∞–ª—å–±–æ–º–∞' },
          description: { type: 'string', description: '–û–ø–∏—Å–∞–Ω–∏–µ –∞–ª—å–±–æ–º–∞' },
          group_id: { type: 'string', description: 'ID –≥—Ä—É–ø–ø—ã' },
          privacy_view: { type: 'array', items: { type: 'string' }, description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞' },
          privacy_comment: { type: 'array', items: { type: 'string' }, description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤' },
        },
        required: ['title', 'group_id'],
        additionalProperties: false,
      },
    },
    {
      name: 'get_photo_albums',
      description: '–ü–æ–ª—É—á–∞–µ—Ç –∞–ª—å–±–æ–º—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π',
      inputSchema: {
        type: 'object',
        properties: {
          owner_id: { type: 'string', description: 'ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∞–ª—å–±–æ–º–æ–≤' },
          album_ids: { type: 'array', items: { type: 'number' }, description: 'ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∞–ª—å–±–æ–º–æ–≤' },
          count: { type: 'number', description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–ª—å–±–æ–º–æ–≤', default: 20 },
          offset: { type: 'number', description: '–°–º–µ—â–µ–Ω–∏–µ', default: 0 },
          need_system: { type: 'boolean', description: '–í–∫–ª—é—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∞–ª—å–±–æ–º—ã', default: false },
          need_covers: { type: 'boolean', description: '–í–∫–ª—é—á–∏—Ç—å –æ–±–ª–æ–∂–∫–∏', default: true },
          photo_sizes: { type: 'boolean', description: '–í–∫–ª—é—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã —Ñ–æ—Ç–æ', default: false },
        },
        additionalProperties: false,
      },
    },
    {
      name: 'edit_photo_album',
      description: '–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∞–ª—å–±–æ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π',
      inputSchema: {
        type: 'object',
        properties: {
          album_id: { type: 'number', description: 'ID –∞–ª—å–±–æ–º–∞' },
          title: { type: 'string', description: '–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–ª—å–±–æ–º–∞' },
          description: { type: 'string', description: '–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–ª—å–±–æ–º–∞' },
          owner_id: { type: 'string', description: 'ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∞–ª—å–±–æ–º–∞' },
          privacy_view: { type: 'array', items: { type: 'string' }, description: '–ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞' },
          privacy_comment: { type: 'array', items: { type: 'string' }, description: '–ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤' },
        },
        required: ['album_id'],
        additionalProperties: false,
      },
    },
    {
      name: 'delete_photo_album',
      description: '–£–¥–∞–ª—è–µ—Ç –∞–ª—å–±–æ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π',
      inputSchema: {
        type: 'object',
        properties: {
          album_id: { type: 'number', description: 'ID –∞–ª—å–±–æ–º–∞' },
          owner_id: { type: 'string', description: 'ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∞–ª—å–±–æ–º–∞' },
        },
        required: ['album_id'],
        additionalProperties: false,
      },
    },
    // User Groups Management
    {
      name: 'get_user_groups',
      description: '–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π',
      inputSchema: {
        type: 'object',
        properties: {
          user_id: { type: 'string', description: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
          extended: { type: 'boolean', description: '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', default: true },
          filter: { type: 'array', items: { type: 'string' }, description: '–§–∏–ª—å—Ç—Ä—ã –≥—Ä—É–ø–ø' },
          fields: { type: 'array', items: { type: 'string' }, description: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' },
          count: { type: 'number', description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø', default: 1000 },
          offset: { type: 'number', description: '–°–º–µ—â–µ–Ω–∏–µ', default: 0 },
        },
        additionalProperties: false,
      },
    },
    {
      name: 'get_group_permissions',
      description: '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ',
      inputSchema: {
        type: 'object',
        properties: {
          group_id: { type: 'string', description: 'ID –≥—Ä—É–ø–ø—ã' },
        },
        required: ['group_id'],
        additionalProperties: false,
      },
    },
    // Advanced Analytics
    {
      name: 'get_group_stats',
      description: '–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä—É–ø–ø—ã',
      inputSchema: {
        type: 'object',
        properties: {
          group_id: { type: 'string', description: 'ID –≥—Ä—É–ø–ø—ã' },
          date_from: { type: 'string', description: '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (YYYY-MM-DD)' },
          date_to: { type: 'string', description: '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (YYYY-MM-DD)' },
          fields: { type: 'array', items: { type: 'string' }, description: '–ü–æ–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏' },
        },
        required: ['group_id'],
        additionalProperties: false,
      },
    },
    {
      name: 'get_group_online_status',
      description: '–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω –≥—Ä—É–ø–ø—ã',
      inputSchema: {
        type: 'object',
        properties: {
          group_id: { type: 'string', description: 'ID –≥—Ä—É–ø–ø—ã' },
        },
        required: ['group_id'],
        additionalProperties: false,
      },
    },
    // User Management
    {
      name: 'search_users',
      description: '–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º',
      inputSchema: {
        type: 'object',
        properties: {
          q: { type: 'string', description: '–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å' },
          sort: { type: 'number', description: '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (0-6)', default: 0 },
          offset: { type: 'number', description: '–°–º–µ—â–µ–Ω–∏–µ', default: 0 },
          count: { type: 'number', description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤', default: 20 },
          fields: { type: 'array', items: { type: 'string' }, description: '–ü–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è' },
          city: { type: 'number', description: 'ID –≥–æ—Ä–æ–¥–∞' },
          country: { type: 'number', description: 'ID —Å—Ç—Ä–∞–Ω—ã' },
          age_from: { type: 'number', description: '–í–æ–∑—Ä–∞—Å—Ç –æ—Ç' },
          age_to: { type: 'number', description: '–í–æ–∑—Ä–∞—Å—Ç –¥–æ' },
          online: { type: 'boolean', description: '–¢–æ–ª—å–∫–æ –æ–Ω–ª–∞–π–Ω', default: false },
          has_photo: { type: 'boolean', description: '–¢–æ–ª—å–∫–æ —Å —Ñ–æ—Ç–æ', default: false },
        },
        required: ['q'],
        additionalProperties: false,
      },
    },
    {
      name: 'get_user_followers',
      description: '–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      inputSchema: {
        type: 'object',
        properties: {
          user_id: { type: 'string', description: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
          offset: { type: 'number', description: '–°–º–µ—â–µ–Ω–∏–µ', default: 0 },
          count: { type: 'number', description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤', default: 20 },
          fields: { type: 'array', items: { type: 'string' }, description: '–ü–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è' },
          name_case: { type: 'string', description: '–ü–∞–¥–µ–∂ –∏–º–µ–Ω–∏', default: 'nom' },
        },
        additionalProperties: false,
      },
    },
    {
      name: 'get_user_subscriptions',
      description: '–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      inputSchema: {
        type: 'object',
        properties: {
          user_id: { type: 'string', description: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
          extended: { type: 'boolean', description: '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', default: false },
          offset: { type: 'number', description: '–°–º–µ—â–µ–Ω–∏–µ', default: 0 },
          count: { type: 'number', description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫', default: 20 },
          fields: { type: 'array', items: { type: 'string' }, description: '–ü–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è' },
        },
        additionalProperties: false,
      },
    },
    // Group Management
    {
      name: 'edit_group',
      description: '–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã',
      inputSchema: {
        type: 'object',
        properties: {
          group_id: { type: 'string', description: 'ID –≥—Ä—É–ø–ø—ã' },
          title: { type: 'string', description: '–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã' },
          description: { type: 'string', description: '–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã' },
          website: { type: 'string', description: '–ù–æ–≤—ã–π —Å–∞–π—Ç –≥—Ä—É–ø–ø—ã' },
          subject: { type: 'string', description: '–ù–æ–≤–∞—è —Ç–µ–º–∞—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã' },
          wall: { type: 'number', description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–µ–Ω—ã (0-3)', default: 1 },
          topics: { type: 'number', description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–π (0-2)', default: 1 },
          wiki: { type: 'number', description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ wiki (0-2)', default: 1 },
          messages: { type: 'number', description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (0-2)', default: 1 },
        },
        required: ['group_id'],
        additionalProperties: false,
      },
    },
    {
      name: 'ban_user',
      description: '–ë–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ',
      inputSchema: {
        type: 'object',
        properties: {
          group_id: { type: 'string', description: 'ID –≥—Ä—É–ø–ø—ã' },
          user_id: { type: 'string', description: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
          end_date: { type: 'number', description: '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (Unix timestamp)' },
          reason: { type: 'number', description: '–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (0-6)', default: 0 },
          comment: { type: 'string', description: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ' },
          comment_visible: { type: 'boolean', description: '–í–∏–¥–∏–º–æ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è', default: false },
        },
        required: ['group_id', 'user_id'],
        additionalProperties: false,
      },
    },
    {
      name: 'unban_user',
      description: '–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ',
      inputSchema: {
        type: 'object',
        properties: {
          group_id: { type: 'string', description: 'ID –≥—Ä—É–ø–ø—ã' },
          user_id: { type: 'string', description: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
        },
        required: ['group_id', 'user_id'],
        additionalProperties: false,
      },
    },
    {
      name: 'get_banned_users',
      description: '–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø—ã',
      inputSchema: {
        type: 'object',
        properties: {
          group_id: { type: 'string', description: 'ID –≥—Ä—É–ø–ø—ã' },
          offset: { type: 'number', description: '–°–º–µ—â–µ–Ω–∏–µ', default: 0 },
          count: { type: 'number', description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', default: 20 },
          owner_id: { type: 'string', description: 'ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≥—Ä—É–ø–ø—ã' },
        },
        required: ['group_id'],
        additionalProperties: false,
      },
    },
  ];
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
async function handleToolCall(vkApi: VKApi, name: string, args: any): Promise<any> {
      switch (name) {
        case 'post_to_wall': {
          let ownerId: string;
          
          if (args.post_as === 'group' && args.group_id) {
            ownerId = `-${args.group_id}`; // –ü–æ—Å—Ç –æ—Ç –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã
          } else if (args.post_as === 'user' && args.user_id) {
            ownerId = args.user_id; // –ü–æ—Å—Ç –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          } else {
            // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –æ—Ç –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω group_id
            ownerId = args.group_id ? `-${args.group_id}` : args.user_id;
          }
          
          const result = await vkApi.postToWall({
            owner_id: ownerId,
            message: args.message,
          });
          return {
            postId: result.post_id,
            message: `Post created successfully as ${args.post_as || 'group'}`,
          };
        }

        case 'get_wall_posts': {
          const ownerId = args.group_id ? `-${args.group_id}` : args.user_id;
      const result = await vkApi.getWallPosts({
            owner_id: ownerId,
            count: args.count || 20,
            offset: args.offset || 0,
          });
      return {
              count: result.count,
        posts: result.items.map((post: any) => ({
                id: post.id,
                text: post.text.substring(0, 100) + (post.text.length > 100 ? '...' : ''),
                date: post.date,
                likes: post.likes?.count || 0,
                reposts: post.reposts?.count || 0,
                comments: post.comments?.count || 0,
        })),
      };
        }

        case 'search_posts': {
          const ownerId = args.group_id ? `-${args.group_id}` : undefined;
      const result = await vkApi.searchPosts({
            query: args.query,
            owner_id: ownerId,
            count: args.count || 20,
            offset: args.offset || 0,
          });
      return {
              count: result.count,
        posts: result.items.map((post: any) => ({
                id: post.id,
                text: post.text.substring(0, 100) + (post.text.length > 100 ? '...' : ''),
                date: post.date,
                likes: post.likes?.count || 0,
                reposts: post.reposts?.count || 0,
                comments: post.comments?.count || 0,
        })),
      };
        }

        case 'get_group_info': {
      const result = await vkApi.getGroupInfo(args.group_id);
          const group = result && result[0];
      return group
        ? {
              id: group.id,
              name: group.name,
              screen_name: group.screen_name,
            description: (group as any).description || '',
              members_count: group.members_count,
            }
        : { error: 'Group not found' };
        }

        case 'get_user_info': {
      const result = await vkApi.getUserInfo(args.user_id);
          const user = result && result[0];
      return user
        ? {
              id: user.id,
              first_name: user.first_name,
              last_name: user.last_name,
              screen_name: user.screen_name,
          }
        : { error: 'User not found' };
    }

    case 'get_post_stats': {
      const ownerId = args.group_id ? `-${args.group_id}` : '';
      const result = await vkApi.getPostStats(
        args.post_id,
        ownerId
      );
      return result;
    }

    case 'get_wall_by_id': {
      const ownerId = args.group_id ? `-${args.group_id}` : '';
      const result = await vkApi.getWallById(
        `${ownerId}_${args.post_id}`
      );
      return result;
    }

    case 'get_comments': {
      const ownerId = args.group_id ? `-${args.group_id}` : '';
      const result = await vkApi.getComments({
        owner_id: ownerId,
        post_id: args.post_id,
        count: args.count || 20,
        offset: args.offset || 0,
      });
      return result;
    }

    case 'create_comment': {
      const ownerId = args.group_id ? `-${args.group_id}` : '';
      const result = await vkApi.createComment({
        owner_id: ownerId,
        post_id: args.post_id,
        message: args.message,
      });
      return result;
    }

    case 'delete_post': {
      const ownerId = args.group_id ? `-${args.group_id}` : '';
      const result = await vkApi.deletePost({
        owner_id: ownerId,
        post_id: parseInt(args.post_id),
      });
      return result;
    }

    case 'edit_post': {
      const ownerId = args.group_id ? `-${args.group_id}` : '';
      const result = await vkApi.editPost({
        owner_id: ownerId,
        post_id: parseInt(args.post_id),
        message: args.message,
      });
      return result;
    }

    case 'add_like': {
      const ownerId = args.group_id ? `-${args.group_id}` : '';
      const result = await vkApi.addLike({
        type: 'post',
        owner_id: ownerId,
        item_id: parseInt(args.post_id),
      });
      return result;
    }

    case 'delete_like': {
      const ownerId = args.group_id ? `-${args.group_id}` : '';
      const result = await vkApi.deleteLike({
        type: 'post',
        owner_id: ownerId,
        item_id: parseInt(args.post_id),
      });
      return result;
    }

    case 'get_group_members': {
      const result = await vkApi.getGroupMembers({
        group_id: args.group_id,
        count: args.count || 100,
        offset: args.offset || 0,
      });
      return result;
    }

    case 'resolve_screen_name': {
      const result = await vkApi.resolveScreenName(
        args.screen_name
      );
      return result;
    }

    case 'upload_wall_photo_from_url': {
      const ownerId = args.group_id ? `-${args.group_id}` : undefined;
      const result = await vkApi.uploadWallPhotoFromUrl({
        imageUrl: args.photo_url,
        owner_id: ownerId
      });
      return result;
    }

    case 'upload_video_from_url': {
      const ownerId = args.group_id ? `-${args.group_id}` : undefined;
      const result = await vkApi.uploadVideoFromUrl({
        videoUrl: args.video_url,
        owner_id: ownerId,
        name: args.name,
        description: args.description
      });
      return result;
    }

    // ===== –ù–û–í–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ =====
    // Stories API
    case 'get_stories_photo_upload_server': {
      const result = await vkApi.getStoriesPhotoUploadServer({
        group_id: args.group_id,
      });
      return result;
    }

    case 'get_stories_video_upload_server': {
      const result = await vkApi.getStoriesVideoUploadServer({
        group_id: args.group_id,
      });
      return result;
    }

    case 'upload_media_to_stories': {
      // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –ò –≤–∏–¥–µ–æ
      const result = await vkApi.uploadPhotoToStories({
        upload_url: args.upload_url,
        photo_file: Buffer.from(args.media_url), // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª
        group_id: args.group_id,
      });
      return result;
    }

    case 'save_story': {
      const result = await vkApi.saveStory({
        upload_results: args.upload_results,
        group_id: args.group_id,
        reply_to_story: args.reply_to_story,
        link_text: args.link_text,
        link_url: args.link_url,
      });
      return result;
    }

    case 'get_stories': {
      const result = await vkApi.getStories({
        owner_id: args.owner_id,
        extended: args.extended,
        fields: args.fields,
      });
      return result;
    }

    case 'delete_story': {
      const result = await vkApi.deleteStory({
        story_id: args.story_id,
        owner_id: args.owner_id,
      });
      return result;
    }

    // Pin/Unpin Posts
    case 'pin_post': {
      const ownerId = `-${args.group_id}`;
      const result = await vkApi.pinPost({
        post_id: args.post_id,
        owner_id: ownerId,
      });
      return result;
    }

    case 'unpin_post': {
      const ownerId = `-${args.group_id}`;
      const result = await vkApi.unpinPost({
        post_id: args.post_id,
        owner_id: ownerId,
      });
      return result;
    }

    // Reposts
    case 'repost': {
      const result = await vkApi.repost({
        object: args.object,
        message: args.message,
        group_id: args.group_id,
      });
      return result;
    }

    case 'get_reposts': {
      const ownerId = `-${args.group_id}`;
      const result = await vkApi.getReposts({
        owner_id: ownerId,
        post_id: args.post_id,
        count: args.count || 20,
        offset: args.offset || 0,
      });
      return result;
    }

    // Photo Albums
    case 'create_photo_album': {
      const result = await vkApi.createPhotoAlbum({
        title: args.title,
        description: args.description,
        group_id: args.group_id,
        privacy_view: args.privacy_view,
        privacy_comment: args.privacy_comment,
      });
      return result;
    }

    case 'get_photo_albums': {
      const result = await vkApi.getPhotoAlbums({
        owner_id: args.owner_id,
        album_ids: args.album_ids,
        count: args.count || 20,
        offset: args.offset || 0,
        need_system: args.need_system || false,
        need_covers: args.need_covers !== false,
        photo_sizes: args.photo_sizes || false,
      });
      return result;
    }

    case 'edit_photo_album': {
      const result = await vkApi.editPhotoAlbum({
        album_id: args.album_id,
        title: args.title,
        description: args.description,
        owner_id: args.owner_id,
        privacy_view: args.privacy_view,
        privacy_comment: args.privacy_comment,
      });
      return result;
    }

    case 'delete_photo_album': {
      const result = await vkApi.deletePhotoAlbum({
        album_id: args.album_id,
        owner_id: args.owner_id,
      });
      return result;
    }

    // User Groups Management
    case 'get_user_groups': {
      const result = await vkApi.getUserGroups({
        user_id: args.user_id,
        extended: args.extended !== false,
        filter: args.filter,
        fields: args.fields,
        count: args.count || 1000,
        offset: args.offset || 0,
      });
      return result;
    }

    case 'get_group_permissions': {
      const result = await vkApi.getGroupPermissions({
        group_id: args.group_id,
      });
      return result;
    }

    // Advanced Analytics
    case 'get_group_stats': {
      const result = await vkApi.getGroupStats({
        group_id: args.group_id,
        date_from: args.date_from,
        date_to: args.date_to,
        fields: args.fields,
      });
      return result;
    }

    case 'get_group_online_status': {
      const result = await vkApi.getGroupOnlineStatus({
        group_id: args.group_id,
      });
      return result;
    }

    // User Management
    case 'search_users': {
      const result = await vkApi.searchUsers({
        q: args.q,
        sort: args.sort || 0,
        offset: args.offset || 0,
        count: args.count || 20,
        fields: args.fields,
        city: args.city,
        country: args.country,
        age_from: args.age_from,
        age_to: args.age_to,
        online: args.online || false,
        has_photo: args.has_photo || false,
      });
      return result;
    }

    case 'get_user_followers': {
      const result = await vkApi.getUserFollowers({
        user_id: args.user_id,
        offset: args.offset || 0,
        count: args.count || 20,
        fields: args.fields,
        name_case: args.name_case || 'nom',
      });
      return result;
    }

    case 'get_user_subscriptions': {
      const result = await vkApi.getUserSubscriptions({
        user_id: args.user_id,
        extended: args.extended || false,
        offset: args.offset || 0,
        count: args.count || 20,
        fields: args.fields,
      });
      return result;
    }

    // Group Management
    case 'edit_group': {
      const result = await vkApi.editGroup({
        group_id: args.group_id,
        title: args.title,
        description: args.description,
        website: args.website,
        subject: args.subject,
        wall: args.wall || 1,
        topics: args.topics || 1,
        wiki: args.wiki || 1,
        messages: args.messages || 1,
      });
      return result;
    }

    case 'ban_user': {
      const result = await vkApi.banUser({
        group_id: args.group_id,
        user_id: args.user_id,
        end_date: args.end_date,
        reason: args.reason || 0,
        comment: args.comment,
        comment_visible: args.comment_visible || false,
      });
      return result;
    }

    case 'unban_user': {
      const result = await vkApi.unbanUser({
        group_id: args.group_id,
        user_id: args.user_id,
      });
      return result;
    }

    case 'get_banned_users': {
      const result = await vkApi.getBannedUsers({
        group_id: args.group_id,
        offset: args.offset || 0,
        count: args.count || 20,
        owner_id: args.owner_id,
      });
      return result;
    }

    default:
      throw new Error(`Unknown tool: ${name}`);
  }
}

// ============================
// –û–°–ù–û–í–ù–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ MCP
// ============================

// GET /mcp - SSE –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (Streamable HTTP)
app.get('/mcp', (req, res) => {
  const sessionId = req.headers['mcp-session-id'] as string;
  
  if (!sessionId || !sessions.has(sessionId)) {
    res.status(400).send('Invalid or missing session ID');
    return;
  }

  console.log(`Client connected to SSE (session: ${sessionId})`);
  res.setHeader('Content-Type', 'text/event-stream; charset=utf-8');
    res.setHeader('Cache-Control', 'no-cache');
    res.setHeader('Connection', 'keep-alive');
    res.flushHeaders();

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
    res.write(`data: ${JSON.stringify({
      jsonrpc: '2.0',
      id: null,
      method: 'notifications/serverInfo',
      params: {
        name: 'vkontakte-mcp-server',
        version: '1.0.0',
        description: 'MCP server for VKontakte (VK.com) integration',
      transport: 'Streamable HTTP',
      capabilities: ['tools'],
      protocolVersion: '2025-03-26'
      }
    })}\n\n`);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
      res.write(`data: ${JSON.stringify({
        jsonrpc: '2.0',
        id: null,
    method: 'notifications/tools/list',
    params: {
      tools: ALL_TOOLS
    }
      })}\n\n`);

  // Keep-alive
  const keepAlive = setInterval(() => {
    res.write(': ping\n\n');
    }, 30000);

    req.on('close', () => {
    console.log(`Client disconnected from SSE (session: ${sessionId})`);
    clearInterval(keepAlive);
  });
});

// POST /mcp - JSON-RPC –¥–ª—è –∫–æ–º–∞–Ω–¥ (Streamable HTTP)
app.post('/mcp', async (req, res) => {
  const { jsonrpc, method, params, id } = req.body;
  
  if (jsonrpc !== '2.0') {
    res.status(400).json({
      jsonrpc: '2.0',
      error: { code: -32600, message: 'Invalid Request' },
      id: id || null
    });
    return;
  }

  try {
    let sessionId = req.headers['mcp-session-id'] as string;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ initialize
  if (method === 'initialize') {
      sessionId = randomUUID();
      sessions.set(sessionId, { initialized: true });
      res.setHeader('mcp-session-id', sessionId);
      
    res.json({
      jsonrpc: '2.0',
      result: {
          protocolVersion: '2025-03-26',
        capabilities: {
            tools: { listChanged: true }
        },
        serverInfo: {
          name: 'vkontakte-mcp-server',
          version: '1.0.0'
        }
        },
        id
      });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    if (!sessionId || !sessions.has(sessionId)) {
      res.status(400).json({
        jsonrpc: '2.0',
        error: { code: -32000, message: 'Session required' },
        id
      });
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Ç–æ–¥–æ–≤
    switch (method) {
      case 'tools/list':
    res.json({
      jsonrpc: '2.0',
          result: { tools: ALL_TOOLS },
          id
        });
        break;

      case 'tools/call': {
        const vkApi = createVKApi(req);
        const result = await handleToolCall(vkApi, params.name, params.arguments || {});
        res.json({
          jsonrpc: '2.0',
      result: {
            content: [{ type: 'text', text: JSON.stringify(result, null, 2) }]
          },
          id
        });
        break;
      }

      default:
        res.json({
          jsonrpc: '2.0',
          error: { code: -32601, message: 'Method not found' },
          id
        });
    }
  } catch (error: any) {
    console.error('Error in POST /mcp:', error);
    res.json({
      jsonrpc: '2.0',
      error: {
        code: -32603,
        message: error.message || 'Internal error'
      },
      id: id || null
    });
  }
});

// DELETE /mcp - –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏
app.delete('/mcp', (req, res) => {
  const sessionId = req.headers['mcp-session-id'] as string;
  
  if (sessionId && sessions.has(sessionId)) {
    sessions.delete(sessionId);
    console.log(`Session closed: ${sessionId}`);
  }
  
  res.status(204).send();
});

// ============================
// N8N –≠–ù–î–ü–û–ò–ù–¢–´
// ============================

// POST /n8n/webhook/:event - –≤–µ–±—Ö—É–∫–∏ –¥–ª—è n8n
app.post('/n8n/webhook/:event', async (req, res, next) => {
  try {
    const { event } = req.params;
    const webhookSecret = req.headers['x-webhook-secret'];
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if (process.env.N8N_WEBHOOK_SECRET && webhookSecret !== process.env.N8N_WEBHOOK_SECRET) {
      return sendErr(res, 401, 'AUTH_FAILED', 'Invalid webhook secret');
    }

    const vkApi = createVKApi(req);
    const data = req.body;

    console.log(`n8n webhook event: ${event}`, data);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    switch (event) {
      case 'post_created': {
        const { message, group_id } = data;
        const result = await vkApi.postToWall({
          owner_id: group_id ? `-${group_id}` : undefined,
          message,
        });
        sendOk(res, { post_id: result.post_id });
          break;
        }

      case 'get_posts': {
        const { group_id, count = 10 } = data;
        const result = await vkApi.getWallPosts({
          owner_id: group_id ? `-${group_id}` : undefined,
          count,
        });
        sendOk(res, result);
          break;
        }

      case 'search': {
        const { query, group_id } = data;
        const result = await vkApi.searchPosts({
          query,
          owner_id: group_id ? `-${group_id}` : undefined,
        });
        sendOk(res, result);
          break;
        }

      default:
        sendErr(res, 400, 'UNKNOWN_EVENT', `Unknown webhook event: ${event}`);
    }
  } catch (error: any) {
    console.error('n8n webhook error:', error);
    next(error);
  }
});

// GET /n8n/poll/:resource - polling –¥–ª—è n8n
app.get('/n8n/poll/:resource', async (req, res, next) => {
  try {
    const { resource } = req.params;
    const { group_id, count = 10, offset = 0, since } = req.query;
    
    const vkApi = createVKApi(req);

    console.log(`n8n polling resource: ${resource}`, req.query);

    switch (resource) {
      case 'posts': {
        const result = await vkApi.getWallPosts({
          owner_id: group_id ? `-${group_id}` : undefined,
          count: Number(count),
          offset: Number(offset),
        });
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
        let items = result.items;
        if (since) {
          const sinceTime = new Date(since as string).getTime() / 1000;
          items = items.filter((post: any) => post.date > sinceTime);
        }
        
        sendOk(res, { ...result, items });
          break;
        }

      case 'groups': {
        const result = await vkApi.getGroupInfo(group_id as string);
        sendOk(res, result);
        break;
      }

      case 'members': {
        const result = await vkApi.getGroupMembers({
          group_id: group_id as string,
          count: Number(count),
          offset: Number(offset),
        });
        sendOk(res, result);
          break;
        }

        default:
        sendErr(res, 400, 'UNKNOWN_RESOURCE', `Unknown polling resource: ${resource}`);
    }
  } catch (error: any) {
    console.error('n8n polling error:', error);
    next(error);
  }
});

// ============================
// –°–ï–†–í–ò–°–ù–´–ï –≠–ù–î–ü–û–ò–ù–¢–´
// ============================

// GET /health - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
app.get('/health', (req, res) => {
  res.json({
    status: 'healthy',
    timestamp: new Date().toISOString(),
    service: 'vkontakte-mcp-server',
    version: '1.0.0',
    environment: process.env.NODE_ENV || 'development',
    port: PORT,
    endpoints: {
      mcp: {
        'POST /mcp': 'JSON-RPC (initialize, tools/list, tools/call)',
        'GET /mcp': 'SSE notifications (Streamable HTTP)',
        'DELETE /mcp': 'Close session'
      },
      n8n: {
        'POST /n8n/webhook/:event': 'Webhook events',
        'GET /n8n/poll/:resource': 'Polling resources'
      },
      service: {
        'GET /health': 'Health check',
        'GET /mcp/info': 'Server information',
        'GET /mcp/tools': 'List all tools'
      }
    }
  });
});

// GET /mcp/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
app.get('/mcp/info', (req, res) => {
  res.json({
    name: 'vkontakte-mcp-server',
    version: '1.0.0',
    description: 'MCP server for VKontakte (VK.com) integration',
    protocol: 'Streamable HTTP',
    protocolVersion: '2025-03-26',
    capabilities: ['tools'],
    tools: ALL_TOOLS.map(t => t.name),
    endpoints: {
      mcp: '/mcp',
      n8n_webhook: '/n8n/webhook/:event',
      n8n_poll: '/n8n/poll/:resource',
      health: '/health'
    }
  });
});

// GET /mcp/tools - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
app.get('/mcp/tools', (req, res) => {
  res.json({
    tools: ALL_TOOLS,
    count: ALL_TOOLS.length
  });
});

// GET / - –∫–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç (—Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π)
app.get('/', (req, res) => {
  res.json({
    message: 'VKontakte MCP Server',
    version: '1.0.0',
    documentation: {
      mcp: 'Use POST /mcp for JSON-RPC and GET /mcp for SSE',
      n8n: 'Use /n8n/webhook/:event and /n8n/poll/:resource',
      info: 'See /mcp/info for server details',
      tools: 'See /mcp/tools for available tools'
    }
  });
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
app.use((err: any, _req: express.Request, res: express.Response, _next: express.NextFunction) => {
  console.error('Global error handler:', err);
  
  const status = err.status || 500;
  const message = err.message || 'Internal Server Error';
  const code = err.code || 'INTERNAL_ERROR';
  
  res.status(status).json({
    success: false,
    error: {
      code,
      message,
      ...(process.env.NODE_ENV === 'development' && { stack: err.stack })
    }
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`‚úÖ VKontakte MCP server running on port ${PORT}`);
  console.log(`üìç Endpoints:`);
  console.log(`   - MCP: POST /mcp, GET /mcp`);
  console.log(`   - n8n: /n8n/webhook/:event, /n8n/poll/:resource`);
  console.log(`   - Info: /health, /mcp/info, /mcp/tools`);
});