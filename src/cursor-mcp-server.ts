import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import {
  CallToolRequestSchema,
  ListToolsRequestSchema,
  Tool,
} from '@modelcontextprotocol/sdk/types.js';
import { VKApi } from './vk-api.js';
import dotenv from 'dotenv';

dotenv.config();

class VKontakteCursorMCPServer {
  private server: Server;
  private vkApi: VKApi;

  constructor() {
    const accessToken = process.env.VK_ACCESS_TOKEN;
    const apiVersion = process.env.VK_API_VERSION || '5.131';

    if (!accessToken) {
      throw new Error('VK_ACCESS_TOKEN environment variable is required');
    }

    this.vkApi = new VKApi(accessToken, apiVersion);
    this.server = new Server(
      {
        name: 'vkontakte-mcp-server',
        version: '1.0.0',
      }
    );

    this.setupToolHandlers();
  }

  private setupToolHandlers() {
    this.server.setRequestHandler(ListToolsRequestSchema, async () => {
      return {
        tools: [
          {
            name: 'post_to_wall',
            description: '–ü—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç –Ω–∞ —Å—Ç–µ–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≥—Ä—É–ø–ø—ã –í–ö–æ–Ω—Ç–∞–∫—Ç–µ',
            inputSchema: {
              type: 'object',
              properties: {
                message: {
                  type: 'string',
                  description: '–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏',
                },
                group_id: {
                  type: 'string',
                  description: 'ID –≥—Ä—É–ø–ø—ã (–¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –≥—Ä—É–ø–ø–µ)',
                },
                user_id: {
                  type: 'string',
                  description: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ)',
                },
                attachments: {
                  type: 'array',
                  items: { type: 'string' },
                  description: '–ú–∞—Å—Å–∏–≤ –≤–ª–æ–∂–µ–Ω–∏–π (—Å—Å—ã–ª–∫–∏ –Ω–∞ –º–µ–¥–∏–∞)',
                },
                publish_date: {
                  type: 'number',
                  description: '–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (Unix timestamp)',
                },
              },
              required: ['message'],
            },
          },
          {
            name: 'get_wall_posts',
            description: '–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å—Ç—ã —Å–æ —Å—Ç–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≥—Ä—É–ø–ø—ã',
            inputSchema: {
              type: 'object',
              properties: {
                group_id: {
                  type: 'string',
                  description: 'ID –≥—Ä—É–ø–ø—ã',
                },
                user_id: {
                  type: 'string',
                  description: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                },
                count: {
                  type: 'number',
                  description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20)',
                },
                offset: {
                  type: 'number',
                  description: '–°–º–µ—â–µ–Ω–∏–µ –æ—Ç –Ω–∞—á–∞–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)',
                },
              },
            },
          },
          {
            name: 'search_posts',
            description: '–ò—â–µ—Ç –ø–æ—Å—Ç—ã –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É',
            inputSchema: {
              type: 'object',
              properties: {
                query: {
                  type: 'string',
                  description: '–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å',
                },
                group_id: {
                  type: 'string',
                  description: 'ID –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ–∏—Å–∫–∞',
                },
                count: {
                  type: 'number',
                  description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
                },
                offset: {
                  type: 'number',
                  description: '–°–º–µ—â–µ–Ω–∏–µ –æ—Ç –Ω–∞—á–∞–ª–∞',
                },
              },
              required: ['query'],
            },
          },
          {
            name: 'get_group_info',
            description: '–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ',
            inputSchema: {
              type: 'object',
              properties: {
                group_id: {
                  type: 'string',
                  description: 'ID –≥—Ä—É–ø–ø—ã',
                },
              },
              required: ['group_id'],
            },
          },
          {
            name: 'get_user_info',
            description: '–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ',
            inputSchema: {
              type: 'object',
              properties: {
                user_id: {
                  type: 'string',
                  description: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                },
              },
              required: ['user_id'],
            },
          },
        ],
      };
    });

    this.server.setRequestHandler(CallToolRequestSchema, async (request) => {
      const { name, arguments: args } = request.params;

      if (!args || typeof args !== 'object') {
        return {
          content: [
            {
              type: 'text',
              text: '‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã',
            },
          ],
          isError: true,
        };
      }

      try {
        switch (name) {
          case 'post_to_wall': {
            const message = args.message as string;
            const groupId = args.group_id as string | undefined;
            const userId = args.user_id as string | undefined;
            const attachments = args.attachments as string[] | undefined;
            const publishDate = args.publish_date as number | undefined;

            if (!message) {
              throw new Error('Message is required');
            }

            const ownerId = groupId ? `-${groupId}` : userId;
            const result = await this.vkApi.postToWall({
              message,
              owner_id: ownerId,
              attachments,
              publish_date: publishDate,
            });
            return {
              content: [
                {
                  type: 'text',
                  text: `–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω! ID –ø–æ—Å—Ç–∞: ${result.post_id}`,
                },
              ],
            };
          }

          case 'get_wall_posts': {
            const groupId = args.group_id as string | undefined;
            const userId = args.user_id as string | undefined;
            const count = args.count as number | undefined;
            const offset = args.offset as number | undefined;

            const ownerId = groupId ? `-${groupId}` : userId;
            const result = await this.vkApi.getWallPosts({
              owner_id: ownerId,
              count: count || 20,
              offset: offset || 0,
            });
            return {
              content: [
                {
                  type: 'text',
                  text: `–ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: ${result.count}\n\n${result.items
                    .map(
                      (post) =>
                        `üìù ${post.text.substring(0, 100)}${
                          post.text.length > 100 ? '...' : ''
                        }\n‚ù§Ô∏è ${post.likes?.count || 0} | üîÑ ${post.reposts?.count || 0} | üí¨ ${
                          post.comments?.count || 0
                        }\n`
                    )
                    .join('\n')}`,
                },
              ],
            };
          }

          case 'search_posts': {
            const query = args.query as string;
            const groupId = args.group_id as string | undefined;
            const count = args.count as number | undefined;
            const offset = args.offset as number | undefined;

            if (!query) {
              throw new Error('Query is required');
            }

            const ownerId = groupId ? `-${groupId}` : undefined;
            const result = await this.vkApi.searchPosts({
              query,
              owner_id: ownerId,
              count: count || 20,
              offset: offset || 0,
            });
            return {
              content: [
                {
                  type: 'text',
                  text: `–ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${query}"\n–ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: ${result.count}\n\n${result.items
                    .map(
                      (post) =>
                        `üîç ${post.text.substring(0, 100)}${
                          post.text.length > 100 ? '...' : ''
                        }\n‚ù§Ô∏è ${post.likes?.count || 0} | üîÑ ${post.reposts?.count || 0} | üí¨ ${
                          post.comments?.count || 0
                        }\n`
                    )
                    .join('\n')}`,
                },
              ],
            };
          }

          case 'get_group_info': {
            const groupId = args.group_id as string;
            if (!groupId) {
              throw new Error('Group ID is required');
            }

            const result = await this.vkApi.getGroupInfo(groupId);
            const group = result[0];
            return {
              content: [
                {
                  type: 'text',
                  text: `üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ: ${group.name}\nID: ${group.id}\n–¢–∏–ø: ${group.type}\n–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${group.members_count}`,
                },
              ],
            };
          }

          case 'get_user_info': {
            const userId = args.user_id as string;
            if (!userId) {
              throw new Error('User ID is required');
            }

            const result = await this.vkApi.getUserInfo(userId);
            const user = result[0];
            return {
              content: [
                {
                  type: 'text',
                  text: `üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n–ò–º—è: ${user.first_name} ${user.last_name}\nID: ${user.id}\nUsername: ${user.screen_name}`,
                },
              ],
            };
          }

          default:
            throw new Error(`Unknown tool: ${name}`);
        }
      } catch (error) {
        return {
          content: [
            {
              type: 'text',
              text: `‚ùå –û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
            },
          ],
          isError: true,
        };
      }
    });
  }

  async run() {
    const transport = new StdioServerTransport();
    await this.server.connect(transport);
    console.error('VKontakte Cursor MCP Server started');
  }
}

const server = new VKontakteCursorMCPServer();
server.run().catch((error) => {
  console.error('Failed to start server:', error);
  process.exit(1);
});
