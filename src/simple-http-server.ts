import express from 'express';
import cors from 'cors';
import { VKApi } from './vk-api.js';
import dotenv from 'dotenv';

dotenv.config();

const app = express();
const PORT = process.env.PORT || 3000;

// CORS –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
app.use(cors({
  origin: '*',
}));

app.use(express.json());

// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è UTF-8
app.use((req, res, next) => {
  res.setHeader('Content-Type', 'application/json; charset=utf-8');
  res.setHeader('Content-Encoding', 'utf-8');
  next();
});

// –°–æ–∑–¥–∞–Ω–∏–µ VK API –∫–ª–∏–µ–Ω—Ç–∞
function createVKApi() {
  const accessToken = process.env.VK_ACCESS_TOKEN;
  const apiVersion = process.env.VK_API_VERSION || '5.131';

  if (!accessToken) {
    throw new Error('VK_ACCESS_TOKEN environment variable is required');
  }

  return new VKApi(accessToken, apiVersion);
}

// –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞
app.post('/test/post', async (req, res) => {
  try {
    const vkApi = createVKApi();
    const { message, group_id, user_id } = req.body;

    if (!message) {
      return res.status(400).json({ error: 'Message is required' });
    }

    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≥—Ä—É–ø–ø–µ
    let ownerId;
    if (group_id) {
      ownerId = `-${group_id}`; // –ú–∏–Ω—É—Å –¥–ª—è –≥—Ä—É–ø–ø—ã
    } else if (user_id) {
      ownerId = user_id; // –ü—Ä—è–º–æ–π ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    } else {
      // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –ø—É–±–ª–∏–∫—É–µ–º –≤ –≥—Ä—É–ø–ø—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      ownerId = `-${process.env.VK_GROUP_ID}`;
    }

    console.log(`–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞: owner_id = ${ownerId}, group_id = ${group_id}, user_id = ${user_id}`);
    console.log(`–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ (UTF-8): ${Buffer.from(message, 'utf8').toString('hex')}`);
    console.log(`–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ (–¥–ª–∏–Ω–∞): ${message.length} —Å–∏–º–≤–æ–ª–æ–≤`);

    const result = await vkApi.postToWall({
      message,
      owner_id: ownerId,
    });

    res.json({
      success: true,
      message: '–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!',
      post_id: result.post_id,
      owner_id: ownerId,
      target: group_id ? 'group' : 'user'
    });
  } catch (error) {
    console.error('Error posting to wall:', error);
    res.status(500).json({
      success: false,
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
    });
  }
});

// –°–ø–∏—Å–æ–∫ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (–¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è)
app.get('/mcp/tools', (_req, res) => {
  res.json({
    tools: [
      'post_to_wall',
      'get_wall_posts',
      'search_posts',
      'get_group_info',
      'get_user_info',
      'get_post_stats',
      'get_wall_by_id',
      'get_comments',
      'create_comment',
      'delete_post',
      'edit_post',
      'add_like',
      'delete_like',
      'get_group_members',
      'resolve_screen_name',
      'upload_wall_photo_from_url',
      'upload_video_from_url'
    ]
  });
});

// –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤
app.get('/test/posts', async (req, res) => {
  try {
    const vkApi = createVKApi();
    const { group_id, user_id, count = 5 } = req.query;

    const ownerId = group_id ? `-${group_id}` : user_id;
    const result = await vkApi.getWallPosts({
      owner_id: ownerId as string,
      count: Number(count),
      offset: 0,
    });

    res.json({
      success: true,
      count: result.count,
      posts: result.items.map(post => ({
        id: post.id,
        text: post.text.substring(0, 100) + (post.text.length > 100 ? '...' : ''),
        date: post.date,
        likes: post.likes?.count || 0,
        reposts: post.reposts?.count || 0,
        comments: post.comments?.count || 0,
      })),
    });
  } catch (error) {
    console.error('Error getting posts:', error);
    res.status(500).json({
      success: false,
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
    });
  }
});

// –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
app.get('/test/user/:user_id', async (req, res) => {
  try {
    const vkApi = createVKApi();
    const { user_id } = req.params;

    const result = await vkApi.getUserInfo(user_id);
    const user = result[0];

    res.json({
      success: true,
      user: {
        id: user.id,
        first_name: user.first_name,
        last_name: user.last_name,
        screen_name: user.screen_name,
        photo_100: user.photo_100,
      },
    });
  } catch (error) {
    console.error('Error getting user info:', error);
    res.status(500).json({
      success: false,
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
    });
  }
});

// –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
app.get('/health', (req, res) => {
  res.json({
    status: 'ok',
    service: 'VKontakte Test Server',
    version: '1.0.0',
    timestamp: new Date().toISOString(),
  });
});

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
app.get('/info', (req, res) => {
  res.json({
    name: 'vkontakte-test-server',
    version: '1.0.0',
    description: 'Simple test server for VKontakte API',
    endpoints: [
      'POST /test/post - –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞',
      'GET /test/posts - –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤',
      'GET /test/user/:user_id - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ',
      'GET /health - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è',
      'GET /info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ',
    ]
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üöÄ VKontakte Test Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üè• Health check: http://localhost:${PORT}/health`);
  console.log(`‚ÑπÔ∏è  Info: http://localhost:${PORT}/info`);
  console.log(`üìù Test post: POST http://localhost:${PORT}/test/post`);
  console.log(`üìñ Test posts: GET http://localhost:${PORT}/test/posts`);
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('–ü–æ–ª—É—á–µ–Ω SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('–ü–æ–ª—É—á–µ–Ω SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  process.exit(0);
});
